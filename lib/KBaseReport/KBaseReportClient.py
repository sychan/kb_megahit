############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class KBaseReport(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=5000):
        if url is None:
            url = 'https://kbase.us/services/njs_wrapper'
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('KBaseReport', job_id)

    def _create_submit(self, params, context=None):
        return self._client._submit_job(
             'KBaseReport.create', [params],
             self._service_ver, context)

    def create(self, params, context=None):
        """
        Create a KBaseReport with a brief summary of an App run.
        :param params: instance of type "CreateReportParams" (Provide the
           report information.  The structure is: params = { report: {
           text_message: '', warnings: ['w1'], objects_created: [ { ref:
           'ws/objid', description: '' }] }, workspace_name: 'ws' }) ->
           structure: parameter "report" of type "Report" (A simple Report of
           a method run in KBase. It only provides for now a way to display a
           fixed width text output summary message, a list of warnings, and a
           list of objects created (each with descriptions). @optional
           warnings @metadata ws length(warnings) as Warnings @metadata ws
           length(text_message) as Size(characters) @metadata ws
           length(objects_created) as Objects Created) -> structure:
           parameter "text_message" of String, parameter "warnings" of list
           of String, parameter "objects_created" of list of type
           "WorkspaceObject" (Represents a Workspace object with some brief
           description text that can be associated with the object. @optional
           description) -> structure: parameter "ref" of type "ws_id" (@id
           ws), parameter "description" of String, parameter "workspace_name"
           of String
        :returns: instance of type "ReportInfo" (The reference to the saved
           KBaseReport.  The structure is: reportInfo = { ref:
           'ws/objid/ver', name: 'myreport.2262323452' }) -> structure:
           parameter "ref" of type "ws_id" (@id ws), parameter "name" of
           String
        """
        job_id = self._create_submit(params, context)
        while True:
            time.sleep(self._client.async_job_check_time)
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]
