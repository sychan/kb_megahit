# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class MegaHit_Sets(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_megahit(self, params, context=None):
        """
        :param params: instance of type "MegaHitParams" (run_megahit() ** ** 
           @optional megahit_parameter_preset **     @optional
           min_contig_len) -> structure: parameter "workspace_name" of
           String, parameter "input_reads_ref" of String, parameter
           "output_contigset_name" of String, parameter
           "combined_assembly_flag" of Long, parameter
           "megahit_parameter_preset" of String, parameter "min_contig_len"
           of Long, parameter "kmer_params" of type "Kmer_Params" (Kmer
           Params **     @optional min_count **     @optional k_min **    
           @optional k_max **     @optional k_step **     @optional k_list)
           -> structure: parameter "min_count" of Long, parameter "k_min" of
           Long, parameter "k_max" of Long, parameter "k_step" of Long,
           parameter "k_list" of list of Long
        :returns: instance of type "MegaHitOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'MegaHit_Sets.run_megahit',
            [params], self._service_ver, context)

    def exec_megahit(self, params, context=None):
        """
        :param params: instance of type "ExecMegaHitParams" (exec_megahit()
           Actual execution of MEGAHIT Accepts ReadsSet or a ReadsLibrary as
           Input Creates Assembly object(s) as output. Will eventually also
           create AssemblySet object if input is a ReadsSet and not running a
           combined assembly Other vars same as run_megahit()) -> structure:
           parameter "workspace_name" of String, parameter "input_reads_ref"
           of String, parameter "output_contigset_name" of String, parameter
           "combined_assembly_flag" of Long, parameter
           "megahit_parameter_preset" of String, parameter "min_count" of
           Long, parameter "k_min" of Long, parameter "k_max" of Long,
           parameter "k_step" of Long, parameter "k_list" of list of Long,
           parameter "min_contig_len" of Long
        :returns: instance of type "ExecMegaHitOutput" -> structure:
           parameter "report_text" of String, parameter
           "output_contigset_ref" of list of String
        """
        return self._client.call_method(
            'MegaHit_Sets.exec_megahit',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('MegaHit_Sets.status',
                                        [], self._service_ver, context)
